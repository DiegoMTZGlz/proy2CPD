CREATE OR REPLACE TRIGGER replicate_orders_insert
AFTER INSERT ON orders
FOR EACH ROW
BEGIN
  INSERT INTO orders_db2 (
    ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID,
    ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID
  ) VALUES (
    :NEW.ORDER_ID, :NEW.ORDER_DATE, :NEW.ORDER_MODE, :NEW.CUSTOMER_ID,
    :NEW.ORDER_STATUS, :NEW.ORDER_TOTAL, :NEW.SALES_REP_ID, :NEW.PROMOTION_ID
  );
END replicate_orders_insert;
/

CREATE OR REPLACE TRIGGER replicate_orders_update
AFTER UPDATE ON orders
FOR EACH ROW
BEGIN
  UPDATE orders_db2 SET 
    ORDER_DATE = :NEW.ORDER_DATE,
    ORDER_MODE = :NEW.ORDER_MODE,
    CUSTOMER_ID = :NEW.CUSTOMER_ID,
    ORDER_STATUS = :NEW.ORDER_STATUS,
    ORDER_TOTAL = :NEW.ORDER_TOTAL,
    SALES_REP_ID = :NEW.SALES_REP_ID,
    PROMOTION_ID = :NEW.PROMOTION_ID
  WHERE ORDER_ID = :OLD.ORDER_ID;
END replicate_orders_update;
/

CREATE OR REPLACE TRIGGER replicate_orders_delete
AFTER DELETE ON orders
FOR EACH ROW
BEGIN
  DELETE FROM orders_db2 WHERE ORDER_ID = :OLD.ORDER_ID;
END replicate_orders_delete;
/

CREATE OR REPLACE TRIGGER replicate_order_items_insert
AFTER INSERT ON order_items
FOR EACH ROW
BEGIN
  INSERT INTO order_items_db2 (
    ORDER_ID, LINE_ITEM_ID, PRODUCT_ID, UNIT_PRICE, QUANTITY
  ) VALUES (
    :NEW.ORDER_ID, :NEW.LINE_ITEM_ID, :NEW.PRODUCT_ID, :NEW.UNIT_PRICE, :NEW.QUANTITY
  );
END replicate_order_items_insert;
/

CREATE OR REPLACE TRIGGER replicate_order_items_update
AFTER UPDATE ON order_items
FOR EACH ROW
BEGIN
  UPDATE order_items_db2 SET 
    PRODUCT_ID = :NEW.PRODUCT_ID,
    UNIT_PRICE = :NEW.UNIT_PRICE,
    QUANTITY = :NEW.QUANTITY
  WHERE ORDER_ID = :OLD.ORDER_ID AND LINE_ITEM_ID = :OLD.LINE_ITEM_ID;
END replicate_order_items_update;
/

CREATE OR REPLACE TRIGGER replicate_order_items_delete
AFTER DELETE ON order_items
FOR EACH ROW
BEGIN
  DELETE FROM order_items_db2 WHERE ORDER_ID = :OLD.ORDER_ID AND LINE_ITEM_ID = :OLD.LINE_ITEM_ID;
END replicate_order_items_delete;
/

CREATE OR REPLACE TRIGGER replicate_product_information_insert
AFTER INSERT ON product_information
FOR EACH ROW
BEGIN
  INSERT INTO product_information_db2 (
    PRODUCT_ID, PRODUCT_NAME, PRODUCT_DESCRIPTION, CATEGORY_ID,
    WEIGHT_CLASS, WARRANTY_PERIOD, SUPPLIER_ID, PRODUCT_STATUS,
    LIST_PRICE, MIN_PRICE, CATALOG_URL
  ) VALUES (
    :NEW.PRODUCT_ID, :NEW.PRODUCT_NAME, :NEW.PRODUCT_DESCRIPTION, :NEW.CATEGORY_ID,
    :NEW.WEIGHT_CLASS, :NEW.WARRANTY_PERIOD, :NEW.SUPPLIER_ID, :NEW.PRODUCT_STATUS,
    :NEW.LIST_PRICE, :NEW.MIN_PRICE, :NEW.CATALOG_URL
  );
END replicate_product_information_insert;
/

CREATE OR REPLACE TRIGGER replicate_product_information_update
AFTER UPDATE ON product_information
FOR EACH ROW
BEGIN
  UPDATE product_information_db2 SET 
    PRODUCT_NAME = :NEW.PRODUCT_NAME,
    PRODUCT_DESCRIPTION = :NEW.PRODUCT_DESCRIPTION,
    CATEGORY_ID = :NEW.CATEGORY_ID,
    WEIGHT_CLASS = :NEW.WEIGHT_CLASS,
    WARRANTY_PERIOD = :NEW.WARRANTY_PERIOD,
    SUPPLIER_ID = :NEW.SUPPLIER_ID,
    PRODUCT_STATUS = :NEW.PRODUCT_STATUS,
    LIST_PRICE = :NEW.LIST_PRICE,
    MIN_PRICE = :NEW.MIN_PRICE,
    CATALOG_URL = :NEW.CATALOG_URL
  WHERE PRODUCT_ID = :OLD.PRODUCT_ID;
END replicate_product_information_update;
/

CREATE OR REPLACE TRIGGER replicate_product_information_delete
AFTER DELETE ON product_information
FOR EACH ROW
BEGIN
  DELETE FROM product_information_db2 WHERE PRODUCT_ID = :OLD.PRODUCT_ID;
END replicate_product_information_delete;
/
